(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{456:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { applyDrag, scene, lorem } from "../utils/helpers";\nimport Kanban from "./kanban.vue";\n\nexport default {\n  name: "CardsKanban",\n\n  components: { Kanban },\n  computed: {\n    notMobile() {\n      return window.innerWidth >= 1025;\n    },\n  },\n  data() {\n    return {\n      item: {},\n      columns: [\n        {\n          name: "Backlog",\n          id: 0,\n          status: ["open"],\n          columnItems: [],\n          validation: (src, payload, index, origins) =>\n            this.columnValidation(src, payload, index, (origins = [""])),\n        },\n        {\n          name: "Executing",\n          id: 1,\n          status: ["executing", "review", "paralised"],\n          columnItems: [],\n          validation: (src, payload, index, origins) =>\n            this.columnValidation(\n              src,\n              payload,\n              index,\n              (origins = ["open", "paralised"])\n            ),\n        },\n        {\n          name: "Finished",\n          id: 2,\n          status: ["finished", "closed"],\n          columnItems: [],\n          validation: (src, payload, index, origins) =>\n            this.columnValidation(\n              src,\n              payload,\n              index,\n              (origins = ["executing", "review"])\n            ),\n        },\n      ],\n      showDropdown: {},\n      opcoesDropdownMenu: [\n        { type: "customAction" },\n        { type: "separator", color: "yellow" },\n        { type: "customAction" },\n      ],\n      scene,\n      upperDropPlaceholderOptions: {\n        className: "cards-drop-preview",\n        animationDuration: "150",\n        showOnTop: true,\n      },\n      dropPlaceholderOptions: {\n        className: "drop-preview",\n        animationDuration: "150",\n        showOnTop: true,\n      },\n    };\n  },\n  mounted() {\n    this.cardsKanban(0, 3, "open", ["executing", "paralised"]);\n    this.cardsKanban(1, 2, "executing", ["paralised", "review"]);\n    this.cardsKanban(2, 0, "finished", ["closed", "finished"]);\n  },\n\n  methods: {\n    iconType(status) {\n      switch (status) {\n        case "finished":\n          return "ðŸš€";\n        case "executing":\n          return "ðŸ”¥";\n        default:\n          return "ðŸ¤ ";\n      }\n    },\n    cardsKanban(colunaId, items, currentStatus, statusList) {\n      const current = this.columns.find((item) => item.id === colunaId);\n      const random = Math.floor(Math.random() * 99);\n      for (let index = 0; index <= items; index++) {\n        current.columnItems.push({\n          id: random + index + 1,\n          task: lorem.slice(0, Math.floor(Math.random() * 20) + 10),\n          date: `11/2${index}/2020`,\n          status: statusList,\n          currentStatus,\n          icon: this.iconType(currentStatus),\n          dropdownId: index,\n          corStatus: {\n            nome: currentStatus,\n            corTexto: `#2${index}1ba8`,\n            cor: `#2${index}3ced`,\n          },\n        });\n      }\n    },\n    selectStatus(item) {\n      this.showDropdown = {\n        id: item.id,\n      };\n    },\n    columnChange({ item, column }) {\n      setTimeout(() => {\n        this.columns.reduce((total, el) => {\n          const items = el.columnItems.map((i) => i.id);\n          if (items.includes(item.id)) {\n            const newStatus = el.columnItems.find((i) => i.id === item.id);\n            if (Array.isArray(column) && column.length) {\n              console.log(column);\n              newStatus.icon = this.iconType(column[0]);\n              return (newStatus.currentStatus = column[0]);\n            }\n            newStatus.currentStatus = column;\n            newStatus.icon = this.iconType(column);\n            const ab = el.columnItems.findIndex((i) => i.id === newStatus.id);\n            const colunaDestino = this.columns.findIndex((col) =>\n              col.status.includes(newStatus.currentStatus)\n            );\n            el.columnItems.splice(ab, 1);\n            this.columns[colunaDestino].columnItems.push(newStatus);\n            return newStatus;\n          } else return this.columns;\n        }, 0);\n      });\n    },\n    columnValidation(src, payload, index, possibleOrigins) {\n      return possibleOrigins.includes(payload.currentStatus);\n    },\n\n    onColumnDrop(dropResult) {\n      const scene = Object.assign({}, this.scene);\n      scene.children = applyDrag(scene.children, dropResult);\n      this.scene = scene;\n    },\n\n    onCardDrop(columnId, dropResult) {\n      if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n        const scene = Object.assign({}, this.scene);\n        const column = scene.children.filter((p) => p.id === columnId)[0];\n        const columnIndex = scene.children.indexOf(column);\n\n        const newColumn = Object.assign({}, column);\n        newColumn.children = applyDrag(newColumn.children, dropResult);\n        scene.children.splice(columnIndex, 1, newColumn);\n\n        this.scene = scene;\n      }\n    },\n\n    getCardPayload(columnId) {\n      return (index) => {\n        return this.scene.children.filter((p) => p.id === columnId)[0].children[\n          index\n        ];\n      };\n    },\n\n    dragStart() {\n      console.log("drag started");\n    },\n\n    log(...params) {\n      console.log(...params);\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="kanban-cards">\n    <Kanban\n      :columns.sync="columns"\n      col-min-width="100"\n      col-max-width="300"\n      count-text="items here"\n      drop-text="Change to this status"\n      @item-dropped="columnChange"\n    >\n      <template v-slot:card="{ item }">\n        <div :class="[\'item\', `${item.currentStatus}`]">\n          <div class="kanban-card">\n            <span class="card">\n              <div class="kanban-action">\n                <label\n                  ><strong>#{{ item.id }}</strong></label\n                >\n                <button :class="[\'kanban-button\', `${item.currentStatus}`]">\n                  {{ item.icon }}\n                </button>\n              </div>\n\n              <label class="label"> {{ item.task }}</label>\n              <small> {{ item.date }} </small>\n            </span>\n          </div>\n        </div>\n      </template>\n    </Kanban>\n  </div>\n</template>\n\n<style scoped>\n.kanban {\n  display: flex;\n  justify-content: stretch;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n}\n.kanban__move-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  font-size: 0.9rem;\n  color: #b0b0b0;\n  user-select: none;\n}\n.kanban__move-icon span {\n  margin-left: 10px;\n}\n.kanban__move-icon svg {\n  width: 20px;\n  height: 20px;\n}\n.kanban__drop-preview {\n  position: relative;\n  margin: 10px;\n  background-color: #edf1f3;\n  border: 2px dashed rgba(0, 0, 0, 0.059);\n  border-radius: 4px;\n}\n.kanban__drop-preview::before {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  color: #b0b0b0;\n  transform: translate(-50%, -50%);\n}\n.kanban__drop-preview::after {\n  position: absolute;\n  top: 50%;\n  left: 27%;\n  width: 20px;\n  height: 20px;\n  content: "";\n  transform: translate(-50%, -50%);\n}\n.kanban__description {\n  display: flex;\n  align-items: center;\n}\n.kanban__icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #edf5f7;\n  padding: 0.5rem;\n  border-radius: 8px;\n}\n.kanban__title {\n  margin: 0 0 0 5px;\n  font-size: 1rem;\n  font-weight: bold;\n  color: #555;\n}\n.kanban__quantity {\n  margin-top: 0;\n  font-size: small;\n  color: #b0b0b0;\n  text-align: right;\n}\n.kanban__quantity--inner-count {\n  margin: 1rem 1rem 0 1rem;\n  padding-top: 0.5rem;\n}\n.kanban__column {\n  flex: 1;\n  height: fit-content;\n  padding: 10px;\n  border-radius: 6px;\n  transition: height 0.5s ease;\n  border: 1px solid #e0e0e0;\n}\n.kanban__column:not(:first-of-type) {\n  margin-left: 15px;\n}\n.kanban__column--no-border {\n  border: none;\n}\n.kanban__header {\n  margin-bottom: 15px;\n  background-color: #fff;\n}\n.kanban__content {\n  position: relative;\n}\n.kanban__skeleton {\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding-top: 15px;\n  padding-right: 15px;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n  overflow: auto;\n}\n.kanban__skeleton-container {\n  width: 100%;\n}\n.kanban__skeleton-column {\n  flex: 1;\n  height: calc(100% - 30px);\n  padding: 10px;\n  margin-left: 15px;\n  background-color: #e9e9e9;\n  border-radius: 6px;\n}\n.kanban__skeleton-card {\n  position: relative;\n  height: 100px;\n  padding: 15px;\n  margin-top: 16px;\n  background-color: #f5f5f5;\n  border-radius: 6px;\n}\n.kanban__skeleton-card--one {\n  position: absolute;\n  top: 8px;\n}\n.kanban__skeleton-card--two {\n  position: absolute;\n  top: 8px;\n  right: 10px;\n}\n.kanban__skeleton-card--three {\n  position: absolute;\n  top: 30px;\n}\n.kanban__skeleton-card--four {\n  position: absolute;\n  bottom: 2rem;\n}\n.kanban__skeleton-card--five {\n  position: absolute;\n  left: 1rem;\n  bottom: 0.5rem;\n}\n\n.item,\n.draggable-item,\n.draggable-item-horizontal {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  margin: 8px;\n  cursor: pointer;\n  user-select: none;\n  background-color: white;\n  border: 1px solid transparent;\n  border-left: 5px solid #e0e0e0;\n  border-radius: 4px;\n  transition: border-color 0.2s linear;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1), 0 0 1px rgba(0, 0, 0, 0.1);\n}\n.item .card {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n.item .card small {\n  color: #838383;\n}\n.item.open {\n  border-left: 5px solid #f3c1c1;\n}\n.item.executing {\n  border-left: 5px solid #c4ebaf;\n}\n.item.finished {\n  border-left: 5px solid #b3d5e9;\n}\n.item.paralised {\n  border-left: 5px solid #dc3545;\n}\n.item.review {\n  border-left: 5px solid #e0e0e0;\n}\n.badge {\n  margin: 1rem 0;\n  cursor: pointer;\n}\n.label {\n  color: #838383;\n  margin-bottom: 5px;\n}\n.kanban-action {\n  display: flex;\n  justify-content: space-between;\n}\n\n.kanban-button {\n  max-width: 130px;\n  pointer-events: none;\n  border: none;\n  color: #f7f7f7;\n  padding: 1px 20px;\n  text-align: center;\n  text-decoration: none;\n  border-radius: 100px;\n}\n\n.kanban-button.open {\n  background-color: #f3c1c1;\n}\n.kanban-button.executing {\n  background-color: #c4ebaf;\n}\n.kanban-button.finished {\n  background-color: #b3d5e9;\n}\n.kanban-button.paralised {\n  background-color: #dc3545;\n}\n.kanban-button.review {\n  background-color: #e0e0e0;\n}\n\n.kanban-cards {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 5px 0;\n}\n</style>\n'},457:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, scene } from "../utils/helpers";\n\nexport default {\n  name: "Cards",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      scene,\n      upperDropPlaceholderOptions: {\n        className: "cards-drop-preview",\n        animationDuration: "150",\n        showOnTop: true,\n      },\n      dropPlaceholderOptions: {\n        className: "drop-preview",\n        animationDuration: "150",\n        showOnTop: true,\n      },\n    };\n  },\n\n  methods: {\n    onColumnDrop(dropResult) {\n      const scene = Object.assign({}, this.scene);\n      scene.children = applyDrag(scene.children, dropResult);\n      this.scene = scene;\n    },\n\n    onCardDrop(columnId, dropResult) {\n      if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n        const scene = Object.assign({}, this.scene);\n        const column = scene.children.filter((p) => p.id === columnId)[0];\n        const columnIndex = scene.children.indexOf(column);\n\n        const newColumn = Object.assign({}, column);\n        newColumn.children = applyDrag(newColumn.children, dropResult);\n        scene.children.splice(columnIndex, 1, newColumn);\n\n        this.scene = scene;\n      }\n    },\n\n    getCardPayload(columnId) {\n      return (index) => {\n        return this.scene.children.filter((p) => p.id === columnId)[0].children[\n          index\n        ];\n      };\n    },\n\n    dragStart() {\n      console.log("drag started");\n    },\n\n    log(...params) {\n      console.log(...params);\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div>\n    <Container\n      orientation="horizontal"\n      @drop="onColumnDrop($event)"\n      drag-handle-selector=".column-drag-handle"\n      @drag-start="dragStart"\n      :drop-placeholder="upperDropPlaceholderOptions"\n    >\n      <Draggable v-for="column in scene.children" :key="column.id">\n        <div :class="column.props.className">\n          <div class="card-column-header">\n            <span class="column-drag-handle">&#x2630;</span>\n            {{ column.name }}\n          </div>\n          <Container\n            group-name="col"\n            @drop="(e) => onCardDrop(column.id, e)"\n            @drag-start="(e) => log(\'drag start\', e)"\n            @drag-end="(e) => log(\'drag end\', e)"\n            :get-child-payload="getCardPayload(column.id)"\n            drag-class="card-ghost"\n            drop-class="card-ghost-drop"\n            :drop-placeholder="dropPlaceholderOptions"\n          >\n            <Draggable v-for="card in column.children" :key="card.id">\n              <div :class="card.props.className" :style="card.props.style">\n                <h3>Task # {{ card.number }}</h3>\n                <p class="card-text">{{ card.data }}</p>\n              </div>\n            </Draggable>\n          </Container>\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},458:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "Copy",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items1: generateItems(15, (i) => ({\n        id: "1" + i,\n        data: `Source Draggable - ${i}`,\n      })),\n      items2: generateItems(15, (i) => ({\n        id: "2" + i,\n        data: `Draggable 2 - ${i}`,\n      })),\n      items3: generateItems(15, (i) => ({\n        id: "3" + i,\n        data: `Draggable 3 - ${i}`,\n      })),\n    };\n  },\n\n  methods: {\n    onDrop(collection, dropResult) {\n      this[collection] = applyDrag(this[collection], dropResult);\n    },\n\n    getChildPayload1(index) {\n      return this.items1[index];\n    },\n\n    getChildPayload2(index) {\n      return this.items2[index];\n    },\n\n    getChildPayload3(index) {\n      return this.items3[index];\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="copy">\n    <div class="item">\n      <Container\n        class="item"\n        behaviour="copy"\n        group-name="1"\n        :get-child-payload="getChildPayload1"\n      >\n        <Draggable v-for="item in items1" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n    <div class="item">\n      <Container\n        group-name="1"\n        :get-child-payload="getChildPayload2"\n        @drop="onDrop(\'items2\', $event)"\n      >\n        <Draggable v-for="item in items2" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n    <div class="item">\n      <Container\n        group-name="1"\n        :get-child-payload="getChildPayload3"\n        @drop="onDrop(\'items3\', $event)"\n      >\n        <Draggable v-for="item in items3" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n  </div>\n</template>\n\n<style>\n.copy {\n  display: flex;\n  gap: 1rem;\n}\n.item {\n  flex: 1;\n}\n</style>\n'},459:function(n,e,t){"use strict";t.r(e),e.default='<template>\n  <div>\n    <code-prism :lang="lang">\n      <slot />\n    </code-prism>\n  </div>\n</template>\n<script>\nimport CodePrism from "./code-prism.js";\n\nexport default {\n  name: "DocCode",\n  components: {\n    "code-prism": CodePrism,\n  },\n  props: {\n    lang: {\n      type: String,\n      default: "js",\n    },\n  },\n};\n<\/script>\n'},460:function(n,e,t){"use strict";t.r(e),e.default='<template>\n  <component v-if="renderOnly" :is="component" />\n  <div v-else class="doc-card">\n    <div class="doc-card-content">\n      <tab-component>\n        <tab-panel-component :selected="true" name="Example" no-transition>\n          <div class="doc-card-preview">\n            <component :is="component" />\n          </div>\n        </tab-panel-component>\n        <tab-panel-component name="Source code" no-transition>\n          <div class="doc-card-source">\n            <tab-component>\n              <tab-panel-component\n                :name="tab"\n                v-for="(tab, index) in tabs"\n                :key="`tab-${tab}`"\n                :selected="index === 0"\n                no-transition\n              >\n                <doc-code lang="markup">{{ parts[tab] }}</doc-code>\n              </tab-panel-component>\n            </tab-component>\n          </div>\n        </tab-panel-component>\n      </tab-component>\n    </div>\n  </div>\n</template>\n<script>\nimport DocCode from "./doc-code";\n\nexport default {\n  name: "DocExample",\n  components: {\n    DocCode,\n  },\n  props: {\n    title: String,\n    file: String,\n    renderOnly: Boolean,\n  },\n  data() {\n    return {\n      loading: true,\n      component: null,\n      tabs: [],\n      currentView: "preview",\n      currentTab: "template",\n      expanded: false,\n      parts: {},\n    };\n  },\n  async mounted() {\n    // await this.parseComponent(this.component);\n    Promise.all([\n      import(\n        /* webpackChunkName: "demo" */\n        /* webpackMode: "lazy-once" */\n        "./" + this.file + ".vue"\n      ).then((comp) => {\n        this.component = comp.default;\n      }),\n      import(\n        /* webpackChunkName: "demo-source" */\n        /* webpackMode: "lazy-once" */\n        "!raw-loader!/" + this.file + ".vue"\n      ).then((comp) => {\n        this.parseComponent(comp.default);\n      }),\n    ]).then(() => {\n      this.loading = false;\n    });\n  },\n  methods: {\n    parseComponent(comp) {\n      const template = this.parseTemplate("template", comp),\n        script = this.parseTemplate("script", comp),\n        style = this.parseTemplate("style", comp);\n      this.parts = {\n        template,\n        script,\n        style,\n      };\n      this.tabs = ["template", "script", "style"].filter(\n        (type) => this.parts[type]\n      );\n    },\n    parseTemplate(target, template) {\n      const string = `(<${target}(.*)?>[\\\\w\\\\W]*<\\\\/${target}>)`,\n        regex = new RegExp(string, "g"),\n        parsed = regex.exec(template) || [];\n      return parsed[1] || "";\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.doc-card {\n  margin-top: 1rem;\n  border: 1px solid #597ba0aa;\n  border-radius: 10px;\n}\n.doc-card-header__title {\n  padding: 0.5em 1em;\n  color: #616161;\n  background: #597ba0aa;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.doc-card-header__title--alt {\n  padding: 0 1em;\n  font-weight: bold;\n  color: #666;\n  text-decoration: underline;\n}\n.doc-card-header__content {\n  padding: 1em;\n}\n.doc-card-content {\n  padding: 1rem;\n}\n.doc-card-preview,\n.doc-card-source {\n  margin-top: 1rem;\n}\n</style>\n'},461:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "DragClass",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(50, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div :class="[\'simple-page\', \'limited-height\']">\n    <Container\n      @drop="onDrop"\n      drag-class="opacity-ghost"\n      drop-class="opacity-ghost-drop"\n    >\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n\n<style scoped>\n.limited-height {\n  height: 60vh;\n  overflow: auto;\n}\n</style>\n'},462:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "DragDelay",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="simple-page">\n    <Container\n      @drop="onDrop"\n      :drag-begin-delay="500"\n      drag-class="form-ghost"\n      drop-class="form-ghost-drop"\n    >\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},463:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "DragHandle",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="simple-page">\n    <Container @drop="onDrop" drag-handle-selector=".column-drag-handle">\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          <span class="column-drag-handle" style="float:left; padding:0 10px;"\n            >&#x2630;</span\n          >\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},464:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\nimport Vue from "vue";\n\nlet i = 0;\n\nfunction id() {\n  return `item-${++i}`;\n}\n\nfunction generate(num) {\n  return generateItems(5, (i) => ({\n    id: id(),\n    data: `Draggable ${num} - ${i + 1}`,\n  }));\n}\n\nexport default {\n  name: "Events",\n\n  components: {\n    Container,\n    Draggable,\n  },\n\n  data() {\n    return {\n      groups: [],\n      flags: [],\n      logs: {\n        "get-child-payload": true,\n        "should-accept-drop": false,\n        "should-animate-drop": false,\n        "drag-start": true,\n        "drag-end": true,\n        "drag-enter": true,\n        "drag-leave": true,\n        "drop-not-allowed": true,\n        drop: true,\n      },\n      logPayload: true,\n    };\n  },\n\n  created() {\n    this.addColumn();\n  },\n\n  methods: {\n    // -----------------------------------------------------------------------------------------------------------------\n    // callbacks\n\n    getChildPayload(groupIndex, itemIndex) {\n      this.log("get-child-payload", groupIndex, itemIndex);\n      return this.groups[groupIndex][itemIndex];\n    },\n\n    getShouldAcceptDrop(index, sourceContainerOptions, payload) {\n      this.log("should-accept-drop", sourceContainerOptions, payload);\n      return this.flags[index].drop;\n    },\n\n    getShouldAnimateDrop(index, sourceContainerOptions, payload) {\n      this.log("should-animate-drop", sourceContainerOptions, payload);\n      return this.flags[index].animate;\n    },\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // events\n\n    onDragStart(...args) {\n      this.log("drag-start", ...args);\n    },\n\n    onDragEnd(...args) {\n      this.log("drag-end", ...args);\n    },\n    onDragEnter(...args) {\n      this.log("drag-enter", ...args);\n    },\n\n    onDragLeave(...args) {\n      this.log("drag-leave", ...args);\n    },\n    fireRelatedEventsOnly(...args) {\n      this.log("fireRelatedEventsOnly", ...args);\n    },\n\n    onDrop(groupIndex, dropResult) {\n      let result = applyDrag(this.groups[groupIndex], dropResult);\n      Vue.set(this.groups, groupIndex, result);\n      this.log("drop", dropResult);\n    },\n\n    dropNotAllowed(...args) {\n      this.log("drop-not-allowed", ...args);\n    },\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // app\n\n    addColumn() {\n      this.groups.push(generate(this.groups.length + 1));\n      this.flags.push({ drop: true, animate: true });\n    },\n\n    removeColumn() {\n      this.groups.pop();\n      this.flags.pop();\n    },\n\n    log(name, ...args) {\n      if (this.logs[name]) {\n        this.logPayload ? console.log(name, ...args) : console.log(name);\n      }\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="demo">\n    <div class="columns">\n      <div v-for="(items, index) in groups" :key="index" class="column">\n        <div class="column-actions">\n          <label>\n            <input type="checkbox" v-model="flags[index].drop" /> Accept drop\n          </label>\n          <label>\n            <input type="checkbox" v-model="flags[index].animate" /> Animate\n            drop\n          </label>\n        </div>\n        <Container\n          :data-index="index"\n          group-name="column"\n          :get-child-payload="(itemIndex) => getChildPayload(index, itemIndex)"\n          :should-accept-drop="\n            (src, payload) => getShouldAcceptDrop(index, src, payload)\n          "\n          :should-animate-drop="\n            (src, payload) => getShouldAnimateDrop(index, src, payload)\n          "\n          @drag-start="onDragStart"\n          @drag-enter="onDragEnter(index)"\n          @drag-leave="onDragLeave(index)"\n          @drag-end="onDragEnd"\n          @drop-not-allowed="dropNotAllowed"\n          @drop="onDrop(index, $event)"\n        >\n          <Draggable v-for="item in items" :key="item.id">\n            <div class="draggable-item">\n              {{ item.data }}\n            </div>\n          </Draggable>\n        </Container>\n      </div>\n    </div>\n\n    <div class="controls">\n      <h4 class="title">Fired events</h4>\n      <hr />\n      <small class="title">\n        Choose which events will be used in the columns\n      </small>\n      <div class="actions">\n        <label v-for="(key, name) in logs" :key="name">\n          <input type="checkbox" v-model="logs[name]" /> {{ name }}\n        </label>\n        <hr />\n        <label>\n          <input type="checkbox" v-model="logPayload" /> log payload\n        </label>\n      </div>\n      <hr />\n      <div class="buttons">\n        <button\n          class="button-column remove"\n          @click="removeColumn()"\n          :disabled="groups.length === 1"\n        >\n          Remove Column\n        </button>\n        <button class="button-column add" @click="addColumn()">\n          Add Column\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.controls {\n  display: flex;\n  flex-direction: column;\n  margin-top: 1em;\n}\n.controls .title {\n  align-self: flex-start;\n  margin: 0 1rem;\n}\n.controls .buttons {\n  align-self: flex-end;\n  margin: 1rem;\n}\n\n.controls .actions {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 0 1rem;\n}\n\n.controls > div {\n  padding-top: 1em;\n}\n\n.buttons,\n.column-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.column-actions {\n  justify-content: space-evenly;\n}\n\n.buttons .button-column {\n  background-color: white;\n  border: 1px solid #e0e0e0;\n  border-left: 5px solid #c4ebaf;\n  border-radius: 4px;\n  padding: 0.5rem;\n  cursor: pointer;\n  transition: border-color 0.2s linear;\n  font-family: inherit;\n}\n\n.buttons .button-column.remove {\n  border-left: 5px solid #dc3545;\n}\n\n.buttons .button-column.remove:disabled {\n  border-left: 5px solid #e0e0e0;\n}\n\n.buttons .button-column.add {\n  border-left: 5px solid #c4ebaf;\n}\n\nlabel {\n  display: block;\n  line-height: 1.6em;\n}\n\n.columns {\n  display: flex;\n  gap: 0.5rem;\n  justify-content: stretch;\n}\n\n.column {\n  flex: 1;\n  border-radius: 6px;\n  /* border: 1px solid #e0e0e0; */\n}\n\n.column {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n}\n\n.column .dndrop-container.vertical {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  cursor: pointer;\n}\n</style>\n'},465:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag } from "../utils/helpers";\n\nconst formInitial = [\n  { type: "header" },\n  { type: "fullname", label: "Full Name" },\n  { type: "email", label: "E Mail" },\n  { type: "address", label: "Address" },\n  { type: "dropdown", label: "Options" },\n  { type: "checkbox", label: "Checkbox Options" },\n  { type: "radio", label: "Radio Options" },\n  { type: "submit" },\n];\n\nexport default {\n  name: "FormDrag",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      form: [...formInitial],\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.form = applyDrag(this.form, dropResult);\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="form-docs">\n    <div class="form">\n      <Container\n        @drop="onDrop($event)"\n        non-drag-area-selector=".field"\n        drag-class="form-ghost"\n        drop-class="form-ghost-drop"\n        :class="{ isActive: true }"\n      >\n        <Draggable v-for="field in form" :key="field.type" class="form">\n          <div class="form-line">\n            <div class="label">\n              <span>{{ field.label }}</span>\n            </div>\n            <div class="field">\n              <h2 v-if="field.type === \'header\'" class="field">\n                Form Header\n              </h2>\n              <div v-if="field.type === \'fullname\'" class="field field-group">\n                <input type="text" /><input type="text" />\n              </div>\n              <div v-if="field.type === \'email\'" class="field">\n                <input type="email" />\n              </div>\n              <div v-if="field.type === \'address\'" class="field">\n                <textarea></textarea>\n              </div>\n              <div v-if="field.type === \'dropdown\'" class="field">\n                <select>\n                  <option value="1">Option 1</option>\n                  <option value="2" selected>Option 2</option>\n                  <option value="3">Option 3</option>\n                  <option value="4">Option 4</option>\n                </select>\n              </div>\n              <div v-if="field.type === \'checkbox\'" class="field">\n                <div>\n                  <label><input type="checkbox" name="r" /> option 1</label>\n                </div>\n                <div>\n                  <label><input type="checkbox" name="r" /> option 2</label>\n                </div>\n                <div>\n                  <label><input type="checkbox" name="r" /> option 3</label>\n                </div>\n                <div>\n                  <label><input type="checkbox" name="r" /> option 4</label>\n                </div>\n                <div>\n                  <label><input type="checkbox" name="r" /> option 5</label>\n                </div>\n              </div>\n              <div v-if="field.type === \'radio\'" class="field">\n                <div>\n                  <label><input type="radio" name="r" /> option 1</label>\n                </div>\n                <div>\n                  <label><input type="radio" name="r" /> option 2</label>\n                </div>\n                <div>\n                  <label><input type="radio" name="r" /> option 3</label>\n                </div>\n                <div>\n                  <label><input type="radio" name="r" /> option 4</label>\n                </div>\n                <div>\n                  <label><input type="radio" name="r" /> option 5</label>\n                </div>\n              </div>\n              <div v-if="field.type === \'submit\'" class="field">\n                <button class="form-submit-button">Submit</button>\n              </div>\n            </div>\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n/* form */\n\n.form-submit-button {\n  width: 100%;\n  height: 40px;\n}\n\n.label {\n  margin-bottom: 5px;\n}\n\n.field {\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 5px;\n  cursor: auto;\n}\n\n.field input,\n.field textarea,\n.field select {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  outline: none;\n  transition: border-color 0.3s ease;\n}\n\n.field input[type="radio"],\n.field input[type="checkbox"] {\n  width: auto;\n}\n\n.field input:focus,\ntextarea:focus {\n  border: 1px solid #80bdff;\n  box-shadow: 0 0 3px 0px #80bdff;\n}\n\n.field-group input,\n.field-group textarea,\n.field-group select {\n  width: 49%;\n  margin-right: 2%;\n}\n\ninput:last-child {\n  margin-right: 0;\n}\n\n/* end form */\n</style>\n'},466:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "Groups",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items1: generateItems(15, (i) => ({\n        id: "1" + i,\n        data: `Draggable 1 - ${i}`,\n      })),\n      items2: generateItems(15, (i) => ({\n        id: "2" + i,\n        data: `Draggable 2 - ${i}`,\n      })),\n      items3: generateItems(15, (i) => ({\n        id: "3" + i,\n        data: `Draggable 3 - ${i}`,\n      })),\n      items4: generateItems(15, (i) => ({\n        id: "4" + i,\n        data: `Draggable 3 - ${i}`,\n      })),\n    };\n  },\n\n  methods: {\n    onDrop(collection, dropResult) {\n      this[collection] = applyDrag(this[collection], dropResult);\n    },\n\n    getChildPayload1(index) {\n      return this.items1[index];\n    },\n\n    getChildPayload2(index) {\n      return this.items2[index];\n    },\n\n    getChildPayload3(index) {\n      return this.items3[index];\n    },\n\n    getChildPayload4(index) {\n      return this.items4[index];\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="groups">\n    <div class="group">\n      <Container\n        group-name="1"\n        :get-child-payload="getChildPayload1"\n        @drop="onDrop(\'items1\', $event)"\n      >\n        <Draggable v-for="item in items1" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n    <div class="group">\n      <Container\n        group-name="1"\n        :get-child-payload="getChildPayload2"\n        @drop="onDrop(\'items2\', $event)"\n      >\n        <Draggable v-for="item in items2" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n    <div class="group">\n      <Container\n        group-name="1"\n        :get-child-payload="getChildPayload3"\n        @drop="onDrop(\'items3\', $event)"\n      >\n        <Draggable v-for="item in items3" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n    <div class="group">\n      <Container\n        group-name="1"\n        :get-child-payload="getChildPayload4"\n        @drop="onDrop(\'items4\', $event)"\n      >\n        <Draggable v-for="item in items4" :key="item.id">\n          <div class="draggable-item">\n            {{ item.data }}\n          </div>\n        </Draggable>\n      </Container>\n    </div>\n  </div>\n</template>\n\n<style lang="css" scoped>\n.groups {\n  display: flex;\n  justify-content: stretch;\n}\n\n.group {\n  flex: 1;\n}\n</style>\n'},467:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nexport default {\n  name: "Kanban",\n  components: { Container, Draggable },\n  props: {\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    columns: {\n      type: Array,\n      default: () => [],\n    },\n    colWidth: {\n      type: [Number, String],\n      default: () => "",\n    },\n    colMinWidth: {\n      type: [Number, String],\n      default: () => "",\n    },\n    colMaxWidth: {\n      type: [Number, String],\n      default: () => "",\n    },\n    dropText: {\n      type: String,\n      default: () => "Drop here",\n    },\n    dropIcon: {\n      type: String,\n      default: () => "copy",\n    },\n    noBorder: {\n      type: Boolean,\n      default: false,\n    },\n    innerColCount: {\n      type: Boolean,\n      default: false,\n    },\n    colBgColor: {\n      type: String,\n      default: () => "",\n    },\n    countText: {\n      type: String,\n      default: () => "itens",\n    },\n    columnCount: {\n      type: [Array],\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      sourceContainerIndex: null,\n      kanbanColumns: [],\n      dropPlaceholderOptions: {\n        className: "drop-preview",\n        animationDuration: "150",\n        showOnTop: true,\n      },\n    };\n  },\n  computed: {\n    colSkeleton() {\n      const screenSize = window.innerWidth - 300;\n      const quantity = screenSize / (this.colMinWidth || 180);\n      return Math.ceil(quantity);\n    },\n\n    columnStyle() {\n      return `width: ${this.colWidth}px;\n          min-width: ${this.colMinWidth}px;\n          max-width: ${this.colMaxWidth}px;\n          `;\n    },\n    contentStyle() {\n      return `background-color: ${this.colBgColor}`;\n    },\n    hasExternalCount() {\n      return this.columnCount && !!this.columnCount.length;\n    },\n  },\n  mounted() {\n    this.kanbanColumns = [...this.columns];\n  },\n  methods: {\n    dropAction(arr, dragResult, column) {\n      const { removedIndex, addedIndex, payload } = dragResult;\n      const { status } = column;\n      if (removedIndex === null && addedIndex === null) return arr;\n\n      const itens = [...arr];\n      let itemToAdd = payload;\n\n      if (removedIndex !== null) {\n        itemToAdd = itens.splice(removedIndex, 1)[0];\n      }\n      if (addedIndex !== null) {\n        itens.splice(addedIndex, 0, itemToAdd);\n        if (payload.status.length > 1)\n          this.$emit("item-dropped", { item: payload, column: status });\n        else if (payload.status !== status)\n          this.$emit("status-change", {\n            item: payload,\n            newStatus: status,\n          });\n      }\n\n      return itens;\n    },\n    validation(src, payload, index, validator = () => true) {\n      const isSource = index === this.sourceContainerIndex;\n      return isSource || validator(src, payload, index);\n    },\n    onDrop(index, dropResult, column) {\n      this.kanbanColumns[index].columnItems = this.dropAction(\n        this.kanbanColumns[index].columnItems,\n        dropResult,\n        column\n      );\n    },\n    getDraggedItem(item, indice, prop) {\n      this.sourceContainerIndex = indice;\n      return this.kanbanColumns[indice].columnItems[item];\n    },\n    dropNotAllowed({ payload, container }) {\n      console.log("drop not allowed", payload);\n    },\n    countValue(column, index) {\n      if (!this.hasExternalCount) return column.columnItems.length;\n\n      const isNumeric = (value) => !isNaN(Number(value));\n      const trueValue = (value) => value || value == 0;\n      const validNumericArray = this.columnCount.length === this.columns.length && this.columnCount.every((value) => isNumeric(value)) \n\n      if (validNumericArray)\n        return trueValue(this.columnCount[index])\n          ? this.columnCount[index]\n          : column.columnItems.length;\n\n      let currentValue = this.columnCount.find(\n        (item) => item.id === column.id\n      )?.value;\n\n      return trueValue(currentValue) ? currentValue : column.columnItems.length;\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="kanban">\n    <template v-if="!loading">\n      <div\n        v-for="(column, index) in kanbanColumns"\n        :key="index"\n        :style="columnStyle"\n        class="kanban__column"\n      >\n        <div class="kanban__header">\n          <div class="kanban__description">\n            <span v-if="$slots[`icon-${column.id}`]" class="kanban__icon">\n              <slot :name="`icon-${column.id}`" />\n            </span>\n            <h3 class="kanban__title">{{ column.name }}</h3>\n          </div>\n          <p v-if="!innerColCount" class="kanban__quantity">\n            {{ countValue(column, index) }}\n            {{ countText }}\n          </p>\n        </div>\n        <div class="kanban__content" :style="contentStyle">\n          <p\n            v-if="innerColCount"\n            :class="[\'kanban__quantity\', \'kanban__quantity--inner-count\']"\n          >\n            {{ countValue(column, index) }} {{ countText }}\n          </p>\n          <Container\n            group-name="kanban"\n            :get-child-payload="(event) => getDraggedItem(event, index)"\n            :should-accept-drop="\n              (src, payload) =>\n                validation(src, payload, index, column.validation)\n            "\n            :drop-placeholder="dropPlaceholderOptions"\n            @drop="onDrop(index, $event, column)"\n            @drag-start="\n              sourceContainerIndex = index;\n              $emit(\'drag\');\n            "\n            @drop-not-allowed="dropNotAllowed"\n            @drag-enter="$emit(\'selected-column\', column)"\n          >\n            <Draggable\n              v-for="(item, indice) in column.columnItems"\n              :key="indice"\n            >\n              <slot name="card" :item="item" />\n            </Draggable>\n\n            <div class="kanban__move-icon">\n              <span>{{ dropText }}</span>\n            </div>\n          </Container>\n        </div>\n      </div>\n    </template>\n    <div v-else class="kanban__skeleton-container">\n      <slot name="skeleton" />\n      <div v-if="!$slots.skeleton" class="kanban__skeleton">\n        <div\n          v-for="(i, index) in colSkeleton"\n          :key="i"\n          class="kanban__skeleton-column"\n          :animation-data="index"\n          :style="`min-width: ${colMinWidth || 180}px; max-width: ${\n            colMaxWidth || 330\n          }px`"\n        >\n          <slot name="skeletonCard" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<style scoped>\n/* kanban */\n.kanban {\n  display: flex;\n  justify-content: stretch;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n}\n.kanban__move-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  font-size: 0.9rem;\n  color: #b0b0b0;\n  user-select: none;\n}\n.kanban__move-icon span {\n  margin-left: 10px;\n}\n.kanban__move-icon svg {\n  width: 20px;\n  height: 20px;\n}\n.kanban__drop-preview {\n  position: relative;\n  margin: 10px;\n  background-color: #edf1f3;\n  border: 2px dashed rgba(0, 0, 0, 0.059);\n  border-radius: 4px;\n}\n.kanban__drop-preview::before {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  color: #b0b0b0;\n  transform: translate(-50%, -50%);\n}\n.kanban__drop-preview::after {\n  position: absolute;\n  top: 50%;\n  left: 27%;\n  width: 20px;\n  height: 20px;\n  content: "";\n  transform: translate(-50%, -50%);\n}\n.kanban__description {\n  display: flex;\n  align-items: center;\n}\n.kanban__icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #edf5f7;\n  padding: 0.5rem;\n  border-radius: 8px;\n}\n.kanban__title {\n  margin: 0 0 0 5px;\n  font-size: 1rem;\n  font-weight: bold;\n  color: #555;\n}\n.kanban__quantity {\n  margin-top: 0;\n  font-size: small;\n  color: #b0b0b0;\n  text-align: right;\n}\n.kanban__quantity--inner-count {\n  margin: 1rem 1rem 0 1rem;\n  padding-top: 0.5rem;\n}\n.kanban__column {\n  flex: 1;\n  height: fit-content;\n  padding: 10px;\n  border-radius: 6px;\n  transition: height 0.5s ease;\n  border: 1px solid #e0e0e0;\n}\n.kanban__column:not(:first-of-type) {\n  margin-left: 15px;\n}\n.kanban__column--no-border {\n  border: none;\n}\n.kanban__header {\n  margin-bottom: 15px;\n  background-color: #fff;\n}\n.kanban__content {\n  position: relative;\n}\n.kanban__skeleton {\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding-top: 15px;\n  padding-right: 15px;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n  overflow: auto;\n}\n.kanban__skeleton-container {\n  width: 100%;\n}\n.kanban__skeleton-column {\n  flex: 1;\n  height: calc(100% - 30px);\n  padding: 10px;\n  margin-left: 15px;\n  background-color: #e9e9e9;\n  border-radius: 6px;\n}\n.kanban__skeleton-card {\n  position: relative;\n  height: 100px;\n  padding: 15px;\n  margin-top: 16px;\n  background-color: #f5f5f5;\n  border-radius: 6px;\n}\n.kanban__skeleton-card--one {\n  position: absolute;\n  top: 8px;\n}\n.kanban__skeleton-card--two {\n  position: absolute;\n  top: 8px;\n  right: 10px;\n}\n.kanban__skeleton-card--three {\n  position: absolute;\n  top: 30px;\n}\n.kanban__skeleton-card--four {\n  position: absolute;\n  bottom: 2rem;\n}\n.kanban__skeleton-card--five {\n  position: absolute;\n  left: 1rem;\n  bottom: 0.5rem;\n}\n\n.item,\n.draggable-item,\n.draggable-item-horizontal {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  margin: 8px;\n  cursor: pointer;\n  user-select: none;\n  background-color: white;\n  border: 1px solid transparent;\n  border-left: 5px solid #e0e0e0;\n  border-radius: 4px;\n  transition: border-color 0.2s linear;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1), 0 0 1px rgba(0, 0, 0, 0.1);\n}\n.item .card {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n.item .card small {\n  color: #838383;\n}\n.item.open {\n  border-left: 5px solid #f3c1c1;\n}\n.item.executing {\n  border-left: 5px solid #c4ebaf;\n}\n.item.finished {\n  border-left: 5px solid #b3d5e9;\n}\n.item.paralised {\n  border-left: 5px solid #dc3545;\n}\n.item.review {\n  border-left: 5px solid #e0e0e0;\n}\n.badge {\n  margin: 1rem 0;\n  cursor: pointer;\n}\n.label {\n  color: #838383;\n}\n\n.kanban-action {\n  display: flex;\n  justify-content: space-between;\n}\n\n.kanban-button {\n  max-width: 130px;\n  pointer-events: none;\n  border: none;\n  color: #f7f7f7;\n  padding: 1px 20px;\n  text-align: center;\n  text-decoration: none;\n  border-radius: 100px;\n}\n\n.kanban-button.open {\n  background-color: #f3c1c1;\n}\n.kanban-button.executing {\n  background-color: #c4ebaf;\n}\n.kanban-button.finished {\n  background-color: #b3d5e9;\n}\n.kanban-button.paralised {\n  background-color: #dc3545;\n}\n.kanban-button.review {\n  background-color: #e0e0e0;\n}\n\n/* end of kanban  */\n</style>\n'},468:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "LockAxis",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div class="simple-page">\n    <Container @drop="onDrop" lock-axis="y">\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},469:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "Nested",\n\n  components: { Container, Draggable },\n\n  data() {\n    const res = {\n      items: generateItems(10, (i) => ({\n        id: i,\n        type: "draggable",\n        data: `Container 1 Draggable - ${i}`,\n      })),\n      items2: generateItems(10, (i) => ({\n        id: i,\n        type: "draggable",\n        data: `Container 2 Draggable - ${i}`,\n      })),\n      items3: generateItems(4, (i) => ({\n        id: i,\n        type: "draggable",\n        data: `Container 3 Draggable - ${i}`,\n      })),\n      innerContainerStyle: {\n        padding: "20px 20px",\n        marginTop: "2px",\n        marginBottom: "2px",\n        border: "1px solid rgba(0,0,0,.125)",\n        backgroundColor: "#f4f5f9aa",\n        cursor: "move",\n      },\n    };\n\n    res.items[5] = {\n      id: 5,\n      type: "container",\n      items: res.items2,\n    };\n\n    res.items[5].items[3] = {\n      id: 3,\n      type: "container",\n      items: generateItems(4, (i) => ({\n        id: i,\n        type: "draggable",\n        data: `Container 4 Draggable - ${i}`,\n      })),\n    };\n\n    res.items[9] = {\n      id: 9,\n      type: "container",\n      items: res.items3,\n    };\n\n    return res;\n  },\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n\n    onInnerDrop(item, dropResult) {\n      const newItems = [...this.items];\n      const index = newItems.indexOf(item);\n      newItems[index].items = applyDrag(newItems[index].items, dropResult);\n      this.items = newItems;\n    },\n\n    onInnerDrop2(item, item2, dropResult) {\n      const newItems = [...this.items];\n      const index = newItems.indexOf(item);\n      const index2 = item.items.indexOf(item2);\n      newItems[index].items[index2].items = applyDrag(\n        newItems[index].items[index2].items,\n        dropResult\n      );\n      this.items = newItems;\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="simple-page">\n    <Container @drop="onDrop($event)">\n      <Draggable v-for="item in items" :key="item.id">\n        <div v-if="item.type === \'draggable\'" class="draggable-item">\n          {{ item.data }}\n        </div>\n        <div v-if="item.type === \'container\'">\n          <div :style="innerContainerStyle">\n            <h4>Sortable List</h4>\n            <div class="no-cursor">\n              <Container @drop="onInnerDrop(item, $event)">\n                <Draggable v-for="q in item.items" :key="q.id">\n                  <div v-if="q.type === \'draggable\'" class="draggable-item">\n                    {{ q.data }}\n                  </div>\n                  <div v-if="q.type === \'container\'">\n                    <div :style="innerContainerStyle">\n                      <h4>Sortable List</h4>\n                      <div class="no-cursor">\n                        <Container @drop="onInnerDrop2(item, q, $event)">\n                          <Draggable v-for="t in q.items" :key="t.id">\n                            <div class="draggable-item">\n                              {{ t.data }}\n                            </div>\n                          </Draggable>\n                        </Container>\n                      </div>\n                    </div>\n                  </div>\n                </Draggable>\n              </Container>\n            </div>\n          </div>\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n\n<style lang="css" scoped>\n.no-cursor {\n  cursor: default;\n}\n</style>\n'},470:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\n\nexport default {\n  name: "SimpleScroller",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      list: [\n        { name: "Neil", category: "Engineering", value: 13 },\n        { name: "Norah", category: "Marketing", value: 23 },\n        { name: "Kasey", category: "Sales", value: 120 },\n        { name: "Sabrina", category: "Marketing", value: 40 },\n        { name: "Paul", category: "Sales", value: 45 },\n      ],\n    };\n  },\n};\n<\/script>\n<template>\n  <div class="wide-page">\n    <p>Properties define the visual behaviour of the library:</p>\n    <table style="border-spacing: 0">\n      <thead>\n        <tr>\n          <th>Property</th>\n          <th style="text-align:center">Type</th>\n          <th style="text-align:center">Default</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td class="prop">:orientation</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>vertical</code></td>\n          <td class="prop">\n            Orientation of the container. Can be <strong>horizontal</strong> or\n            <strong>vertical</strong>.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:behaviour</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>move</code></td>\n          <td class="prop">\n            Property to describe wether the dragging item will be moved or\n            copied to target container. Can be <strong>move</strong> or\n            <strong>copy</strong> or <strong>drop-zone</strong> or\n            <strong>contain</strong>.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:tag</td>\n          <td style="text-align:center">string or NodeDescription</td>\n          <td style="text-align:center"><code>div</code></td>\n          <td class="prop"><em>See descriptions below</em></td>\n        </tr>\n        <tr>\n          <td class="prop">:group-name</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Draggables can be moved between the containers having the same group\n            names. If not set container will not accept drags from outside. This\n            behaviour can be overwritten by shouldAcceptDrop function. See below.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:lock-axis</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Locks the movement axis of the dragging. Possible values are\n            <strong>x</strong>, <strong>y</strong> or\n            <strong>undefined</strong>.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:drag-handle-selector</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Css selector to test for enabling dragging. If not given item can be\n            grabbed from anywhere in its boundaries.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:non-drag-area-selector</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Css selector to prevent dragging. Can be useful when you have form\n            elements or selectable text somewhere inside your draggable item. It\n            has a precedence over <strong>dragHandleSelector</strong>.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:drag-begin-delay</td>\n          <td style="text-align:center">number</td>\n          <td style="text-align:center">\n            <code>0</code> (<code>200</code> for touch devices)\n          </td>\n          <td class="prop">\n            Time in milisecond. Delay to start dragging after item is pressed.\n            Moving cursor before the delay more than 5px will cancel dragging.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:animation-duration</td>\n          <td style="text-align:center">number</td>\n          <td style="text-align:center"><code>250</code></td>\n          <td class="prop">\n            Animation duration in milisecond. To be consistent this animation\n            duration will be applied to both drop and reorder animations.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:auto-scroll-enabled</td>\n          <td style="text-align:center">boolean</td>\n          <td style="text-align:center"><code>true</code></td>\n          <td class="prop">\n            First scrollable parent will scroll automatically if dragging item\n            is close to boundaries.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:drag-class</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Class to be added to the ghost item being dragged. The class will be\n            added after it&#39;s added to the DOM so any transition in the class\n            will be applied as intended.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:drop-class</td>\n          <td style="text-align:center">string</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Class to be added to the ghost item just before the drop animation\n            begins.\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:remove-on-drop-out</td>\n          <td style="text-align:center">boolean</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            When set true onDrop will be called with a removedIndex if you drop\n            element out of any relevant container\n          </td>\n        </tr>\n        <tr>\n          <td class="prop">:drop-placeholder</td>\n          <td style="text-align:center">boolean,object</td>\n          <td style="text-align:center"><code>undefined</code></td>\n          <td class="prop">\n            Options for drop placeholder. <strong>className</strong>,\n            <strong>animationDuration</strong>, <strong>showOnTop</strong>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<style lang="css" scoped>\ntable {\n  display: table;\n  /* border-collapse: collapse does not work when rows are dragged (transformed) */\n  border-collapse: separate;\n}\n\ntr {\n  display: table-row !important;\n}\n\ntr[style*="transform"] {\n  border-collapse: separate !important;\n}\n\ntd {\n  padding: 5px;\n  border: 1px solid #ccc !important;\n  background-color: white;\n}\n\n.table,\ntd,\nth {\n  border: 1px solid #ddd;\n  text-align: left;\n  font-family: monospace;\n}\n\n.table {\n  border-collapse: collapse;\n  width: 1200px;\n}\n\nth,\ntd {\n  padding: 15px;\n}\n\n.page {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2rem;\n}\n\n.prop:nth-child(odd) {\n  background-color: #f2f2f2;\n}\n</style>\n'},471:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "SimpleHorizontal",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n<template>\n  <div style="overflow-x: auto">\n    <Container @drop="onDrop" orientation="horizontal" behaviour="contain">\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item-horizontal">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},472:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "SimpleScroller",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="simple-page" style="height: 80vh; overflow-y: auto">\n    <Container @drop="onDrop">\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},473:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "SimpleTagless",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      console.log("drop result ", dropResult);\n      this.items = applyDrag(this.items, dropResult);\n    },\n    getGhostParent() {\n      return document.body;\n    },\n    onDropReady(dropResult) {\n      console.log("drop ready", dropResult);\n    },\n    dropNotAllowed({ payload, container }) {\n      console.log("drop not allowed");\n    },\n    getChildPayload(index) {\n      return this.items[index];\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="simple-page">\n    <Container\n      :get-ghost-parent="getGhostParent"\n      :get-child-payload="getChildPayload"\n      remove-on-drop-out\n      @drop="onDrop"\n      @drop-ready="onDropReady"\n      @drop-not-allowed="dropNotAllowed"\n    >\n      <Draggable v-for="item in items" :key="item.id">\n        {{ item.data }}\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},474:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "Simple",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      console.log("drop result ", dropResult);\n      this.items = applyDrag(this.items, dropResult);\n    },\n    getGhostParent() {\n      return document.body;\n    },\n    onDropReady(dropResult) {\n      console.log("drop ready", dropResult);\n    },\n    dropNotAllowed({ payload, container }) {\n      console.log("drop not allowed");\n    },\n    getChildPayload(index) {\n      return this.items[index];\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="simple-page">\n    <Container\n      :get-ghost-parent="getGhostParent"\n      :get-child-payload="getChildPayload"\n      @drop="onDrop"\n      @drop-ready="onDropReady"\n      @drop-not-allowed="dropNotAllowed"\n    >\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'},475:function(n,e,t){"use strict";t.r(e),e.default='<script>\nexport default {\n  name: "TabComponent",\n  props: {\n    headerAlign: {\n      type: String,\n      required: false,\n      default: "left",\n      validator(value) {\n        return ["center", "left"].includes(value);\n      },\n    },\n    defaultTab: {\n      type: String,\n      default: () => "",\n    },\n  },\n  data() {\n    return {\n      tabs: [],\n    };\n  },\n  created() {\n    this.tabs = this.$children;\n  },\n  mounted() {\n    if (this.defaultTab) this.selectTab({ name: this.defaultTab });\n\n    const slider = this.$refs.refTabs;\n    let isDown = false;\n    let startX;\n    let scrollLeft;\n\n    slider.addEventListener("mousedown", (e) => {\n      isDown = true;\n      slider.classList.add("active");\n      startX = e.pageX - slider.offsetLeft;\n      scrollLeft = slider.offsetLeft;\n    });\n    slider.addEventListener("mouseup", () => {\n      isDown = false;\n      slider.classList.remove("active");\n    });\n    slider.addEventListener("mouseleave", () => {\n      isDown = false;\n      slider.classList.remove("active");\n    });\n    slider.addEventListener("mousemove", (e) => {\n      if (!isDown) return;\n      e.preventDefault();\n\n      const x = e.pageX - slider.offsetLeft;\n      const walk = (x - startX) * 2;\n\n      slider.scrollLeft = scrollLeft - walk;\n    });\n  },\n  methods: {\n    selectTab(selectedTab) {\n      this.tabs.forEach((tab) => {\n        const tabMatch = tab.name === selectedTab.name;\n        tab.isActive = tabMatch;\n        if (tabMatch) this.$emit("change-tab", tab.name);\n      });\n    },\n  },\n};\n<\/script>\n\n<template>\n  <div :class="`tab --${headerAlign}`">\n    <div class="tab__header">\n      <div ref="refTabs" class="tab__header__list">\n        <div\n          v-for="tab in tabs"\n          :key="tab.name"\n          class="tab__header__list__item"\n          :class="{ \'is-active\': tab.isActive }"\n        >\n          <div\n            class="tab__header__list__item__clickable"\n            @click="selectTab(tab)"\n          >\n            {{ tab.name }}\n            <div class="tab__header__list__item__clickable__bar" />\n          </div>\n        </div>\n      </div>\n      <div class="tab__header__line-bar" />\n    </div>\n    <div class="tab__content">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.tab {\n  width: 100%;\n}\n.tab__header {\n  position: relative;\n}\n.tab__header__line-bar {\n  position: absolute;\n  right: 0;\n  bottom: 3px;\n  left: 0;\n  z-index: 1;\n  width: 100%;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n}\n.tab__header__list {\n  position: relative;\n  display: flex;\n  flex-grow: 1;\n  flex-shrink: 0;\n  align-items: center;\n  padding: 4px 0;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  white-space: nowrap;\n  list-style: none;\n  user-select: none;\n  scrollbar-width: none;\n}\n.tab__header__list::-webkit-scrollbar {\n  display: none;\n}\n.tab__header__list__item__clickable {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  min-width: calc(10% - 50px);\n  padding: 6px 24px;\n  font-weight: 700;\n  color: #597ba0aa;\n  text-align: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  background-color: initial;\n  border: 1px solid transparent;\n}\n.tab__header__list__item__clickable__bar {\n  position: absolute;\n  bottom: -4px;\n  width: 100%;\n  min-width: calc(10% - 50px);\n  min-height: 5px;\n  content: "";\n  background-color: transparent;\n  border-radius: 15px;\n}\n.tab__header__list__item__clickable:hover {\n  color: #263c53aa;\n}\n.tab__header__list__item.is-active .tab__header__list__item__clickable {\n  color: #597ba0aa;\n  letter-spacing: 0;\n}\n.tab__header__list__item.is-active .tab__header__list__item__clickable__bar {\n  z-index: 2;\n  background-color: #597ba0aa;\n}\n.tab__content {\n  display: flex;\n  width: 100%;\n}\n.--center .tab__header__list {\n  justify-content: center;\n}\n.--left .tab__header__list {\n  justify-content: flex-start;\n}\n.--right .tab__header__list {\n  justify-content: flex-end;\n}\n</style>\n'},476:function(n,e,t){"use strict";t.r(e),e.default='<script>\nexport default {\n  name: "TabPanel",\n  props: {\n    name: {\n      type: String,\n      required: true,\n    },\n    selected: {\n      type: Boolean,\n      required: false,\n    },\n    noTransition: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      isActive: false,\n    };\n  },\n  mounted() {\n    this.isActive = this.selected;\n  },\n};\n<\/script>\n<template>\n  <div\n    v-if="isActive"\n    :class="`tab-panel ${noTransition ? \'tab-panel--no-transition\' : \'\'}`"\n  >\n    <slot />\n  </div>\n</template>\n\n<style>\n.tab-panel {\n  width: 100%;\n  animation: fadeEffect 0.8s;\n}\n.tab-panel--no-transition {\n  animation: none;\n}\n\n@keyframes fadeEffect {\n  from {\n    opacity: 0.3;\n  }\n  to {\n    opacity: 1;\n  }\n}\n</style>\n'},477:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "Table",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    getGhostParent() {\n      return document.querySelector("tbody");\n    },\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n    onDropReady(dropResult) {\n      console.log("drop ready", dropResult);\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="wide-page">\n    <table style="border-spacing: 0">\n      <thead>\n        <tr>\n          <th>Lorem</th>\n          <th>Ipsum</th>\n          <th>Sit</th>\n        </tr>\n      </thead>\n      <Container\n        @drop="onDrop"\n        tag="tbody"\n        @drop-ready="onDropReady"\n        lock-axis="y"\n      >\n        <Draggable\n          v-for="item in items"\n          :key="item.id"\n          tag="tr"\n          style="height: 30px"\n        >\n          <td>Row {{ item.data }} Column 1</td>\n          <td>Row {{ item.data }} Column 2</td>\n          <td>Row {{ item.data }} Column 3</td>\n        </Draggable>\n      </Container>\n    </table>\n  </div>\n</template>\n\n<style lang="css" scoped>\ntable {\n  display: table;\n\n  border-collapse: separate;\n}\n\ntr {\n  display: table-row !important;\n}\n\ntr[style*="transform"] {\n  border-collapse: separate !important;\n}\n\ntd {\n  padding: 5px;\n  border: 1px solid #ccc !important;\n  background-color: white;\n}\n\n.table,\ntd,\nth {\n  border: 1px solid #ddd;\n  text-align: center;\n}\n\n.table {\n  border-collapse: collapse;\n  width: 1200px;\n}\n\nth,\ntd {\n  padding: 15px;\n}\n\n.page {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2rem;\n}\n\n.prop:nth-child(odd) {\n  background-color: #f2f2f2;\n}\n</style>\n'},478:function(n,e,t){"use strict";t.r(e),e.default='<script>\nimport { Container, Draggable } from "vue-dndrop";\nimport { applyDrag, generateItems } from "../utils/helpers";\n\nexport default {\n  name: "TransitionDuration",\n\n  components: { Container, Draggable },\n\n  data() {\n    return {\n      items: generateItems(10, (i) => ({ id: i, data: "Draggable " + i })),\n    };\n  },\n\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n<\/script>\n<template>\n  <div class="simple-page">\n    <Container @drop="onDrop" :animation-duration="1000">\n      <Draggable v-for="item in items" :key="item.id">\n        <div class="draggable-item">\n          {{ item.data }}\n        </div>\n      </Draggable>\n    </Container>\n  </div>\n</template>\n'}}]);